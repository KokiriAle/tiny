package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal BEGIN;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal FOR;
terminal VOID;
terminal INT;
terminal BOOLEAN;
terminal RETURN;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal LE;
terminal GE;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal DIFFERENT;
terminal AND;
terminal OR;
terminal LPAREN;
terminal RPAREN;
terminal LCLASP;
terminal RCLASP;
terminal SEMI;
terminal COMMA;
terminal EMPTY;
terminal Integer NUM;
terminal String ID;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase block;
non terminal NodoBase mainbody;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase simple_exp1;
non terminal NodoBase simple_exp2;
non terminal NodoBase simple_exp3;
non terminal NodoBase simple_exp4;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase vector;
non terminal NodoBase decl_stmt;
non terminal NodoBase type;
non terminal NodoBase var_list;
non terminal NodoBase call_funct;
non terminal NodoBase param_list;
non terminal NodoBase param;
non terminal NodoBase decl_funct;
non terminal NodoBase decl_functs;
non terminal NodoBase defpar_list;
non terminal NodoBase return_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase bool;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* REGLAS GRAMATICALES */
/*program 	-> block*/	

program     ::= stmt_seq:s	{: if(modoDepuracion) System.out.println("\t regla 1"); 
					ast = s;
					:};

block       ::= decl_functs:declararfun mainbody:cuerpo {: :}
            | mainbody:cuerpo	{:	:};

decl_functs ::= decl_functs:declara decl_funct:dfunc {: :}
			| EMPTY {: :};
			
decl_funct  ::= type:tipo ID:ident LPAREN defpar_list:lista RPAREN mainbody:cuerpo {: :};

defpar_list ::= defpar_list:listp COMMA type:tipo ID:ident {: :}
			| type:tipo ID:ident {: :}
			|EMPTY {: :};
					
mainbody    ::= BEGIN stmt_seq:secu END  {: :};		

stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:};

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
			| decl_stmt {: :}
			
			| call_funct {: :}
			
			| return_stmt {: :}
			
			| for_stmt {: :}
			
            | error	{: if(modoDepuracion) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:};

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:};

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:};

assign_stmt ::= ID:variable 	{: if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:};

read_stmt   ::= READ ID:variable	{: if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:};

write_stmt  ::= WRITE exp:ex	{: if(modoDepuracion) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:};
					
decl_stmt   ::= type:tipo var_list:lista {: :}
			| type:tipo assign_stmt:astmt {: :}
			| type:tipo vector:vec {: :};

type 		::= INT {: :}
			| BOOLEAN {: :}
			| VOID {: :};					

var_list    ::= var_list:lista COMMA factor {: :}
			| factor {: :};
			
call_funct  ::=ID:ident LPAREN param_list:plist RPAREN{: :};					

param_list  ::= param_list:lista COMMA param:parametro {: :}
			| param:parametro {: :}
			| EMPTY {: :};					
					
param       ::= bool:booleano {: :}
			| exp:expres {: :};
			

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:};
	
simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:};

term        ::= term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:};

factor      ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(modoDepuracion) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:};
				
return_stmt  ::= RETURN exp:expres {: :};

for_stmt     ::= FOR LPAREN assign_stmt:asig SEMI exp:express SEMI assign_stmt:asigna RPAREN stmt_seq:sent END {: :};

