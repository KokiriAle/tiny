package compilador;
package ast;

import java_cup.runtime.*;
import ast.*;
import compilador.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal BEGIN;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal FOR;
terminal VOID;
terminal INT;
terminal BOOLEAN;
terminal RETURN;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal LE;
terminal GE;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal DIFFERENT;
terminal AND;
terminal OR;
terminal LPAREN;
terminal RPAREN;
terminal LCLASP;
terminal RCLASP;
terminal SEMI;
terminal COMMA;
terminal Integer NUM;
terminal String ID;


/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase bloque;
non terminal NodoBase cp;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase stmt_decl;
non terminal NodoBase tipo;
non terminal NodoBase list_var;
non terminal NodoBase var;
non terminal NodoBase vector;
non terminal NodoBase assign_stmt;
non terminal NodoBase term;
non terminal NodoBase literal;
non terminal NodoBase bool;
non terminal NodoBase exp;
non terminal NodoBase expI;
non terminal NodoBase expB;
non terminal NodoBase opI;
non terminal NodoBase opB;
non terminal NodoBase call_funct;
non terminal NodoBase list_parm;
non terminal NodoBase parm;
non terminal NodoBase funct_decl;
non terminal NodoBase bloquef;
non terminal NodoBase list_def_parm;
non terminal NodoBase if_stmt;
non terminal NodoBase if_exp;
non terminal NodoBase op_comp;
non terminal NodoBase for_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;





non terminal NodoBase repeat_stmt;
non terminal NodoBase simple_exp;
non terminal NodoBase factor;

/* Precedencia de operadores */
precedence left BEGIN;
precedence left LPAREN, RPAREN;
precedence left TIMES;
precedence left OVER;
precedence left PLUS;
precedence left MINUS;


/* REGLAS GRAMATICALES */
program     ::= bloque:s        {: if(modoDepuracion) System.out.println("\t regla 0"); 
					ast = s;
					:};

bloque      ::= funct_decl:ini cp:cuerpo {: if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(cuerpo);
							RESULT=ini;
						}else{
							RESULT=cuerpo;
						}
						:}
            |cp:cuerpo	{: if(modoDepuracion) System.out.println("\t regla 2a"); 
				RESULT=cuerpo;				
				:};

cp   ::= BEGIN stmt_seq:sent END {: if(modoDepuracion) System.out.println("\t regla 2"); 
					NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=sent;
						}
						
			:};

stmt_seq ::= stmt_seq:ini stmt:sent {: if(modoDepuracion) System.out.println("\t regla 3a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 3b"); 
				RESULT=sent;				
				:}
		;
		
stmt ::= stmt_decl:sent SEMI {: if(modoDepuracion) System.out.println("\t regla 4"); 
					NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=sent;
						} 
  		:} ;
       | assign_stmt:sent SEMI {: if(modoDepuracion) System.out.println("\t regla 4"); 
					NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=sent;
						} 
  		:} ;
	   
	   | call_funct:sent SEMI  {: if(modoDepuracion) System.out.println("\t regla 4"); 
					NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=sent;
						} 
  		:} ;
		
         | funct_decl:sent SEMI {: if(modoDepuracion) System.out.println("\t regla 4"); 
					NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=sent;
						} 
  		:} ; 
         | if_stmt:sent SEMI {: if(modoDepuracion) System.out.println("\t regla 4"); 
					NodoBase hijoActual = sent;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=sent;
						} 
  		:} ;
 

		 | for_stmt:sent | write_stmt:sent SEMI | read_stmt:sent SEMI		
		
/****************************************Hasta Aqui hoy 11/04*****************************/		
		
		
		
		
/*program     ::= stmt_seq:s	{: if(modoDepuracion) System.out.println("\t regla 1"); 
					ast = s;
					:}
		;

stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
            | error	{: if(modoDepuracion) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

assign_stmt ::= ID:variable 	{: if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
		;

read_stmt   ::= READ ID:variable	{: if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(modoDepuracion) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(modoDepuracion) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;
*/