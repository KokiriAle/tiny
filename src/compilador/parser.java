
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 16 09:31:59 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;
import compilador.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 16 09:31:59 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\026\004\000\002\026\003" +
    "\000\002\025\010\000\002\027\006\000\002\027\004\000" +
    "\002\027\003\000\002\004\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\007\000\002\007\011\000\002" +
    "\010\006\000\002\035\002\000\002\011\006\000\002\032" +
    "\004\000\002\031\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\006\000\002\023\005\000\002\023\003\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\030\004" +
    "\000\002\033\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\030\003\022\004\013\011\030\013\005\014" +
    "\015\015\026\016\027\017\006\020\017\021\011\047\016" +
    "\001\002\000\014\002\ufff3\006\ufff3\010\ufff3\012\ufff3\043" +
    "\ufff3\001\002\000\004\047\135\001\002\000\012\003\uffe0" +
    "\037\uffe0\046\uffe0\047\uffe0\001\002\000\014\002\uffee\006" +
    "\uffee\010\uffee\012\uffee\043\uffee\001\002\000\012\003\041" +
    "\037\045\046\040\047\126\001\002\000\012\003\041\037" +
    "\045\046\040\047\037\001\002\000\014\002\ufff1\006\ufff1" +
    "\010\ufff1\012\ufff1\043\ufff1\001\002\000\012\003\041\037" +
    "\045\046\040\047\037\001\002\000\004\002\115\001\002" +
    "\000\012\003\041\037\045\046\040\047\037\001\002\000" +
    "\006\022\uffe7\037\103\001\002\000\012\003\uffdf\037\uffdf" +
    "\046\uffdf\047\uffdf\001\002\000\014\002\uffed\006\uffed\010" +
    "\uffed\012\uffed\043\uffed\001\002\000\006\002\001\043\035" +
    "\001\002\000\014\002\uffeb\006\uffeb\010\uffeb\012\uffeb\043" +
    "\uffeb\001\002\000\014\002\ufff4\006\ufff4\010\ufff4\012\ufff4" +
    "\043\ufff4\001\002\000\014\002\uffec\006\uffec\010\uffec\012" +
    "\uffec\043\uffec\001\002\000\014\002\ufff0\006\ufff0\010\ufff0" +
    "\012\ufff0\043\ufff0\001\002\000\004\037\066\001\002\000" +
    "\012\003\uffde\037\uffde\046\uffde\047\uffde\001\002\000\030" +
    "\003\022\004\013\011\030\013\005\014\015\015\026\016" +
    "\027\017\006\020\017\021\011\047\016\001\002\000\014" +
    "\002\uffef\006\uffef\010\uffef\012\uffef\043\uffef\001\002\000" +
    "\014\002\ufff5\006\ufff5\010\ufff5\012\ufff5\043\ufff5\001\002" +
    "\000\014\002\ufff2\006\ufff2\010\ufff2\012\ufff2\043\ufff2\001" +
    "\002\000\006\012\036\043\035\001\002\000\030\003\022" +
    "\004\013\011\030\013\005\014\015\015\026\016\027\017" +
    "\006\020\017\021\011\047\016\001\002\000\012\003\041" +
    "\037\045\046\040\047\037\001\002\000\036\002\uffca\005" +
    "\uffca\006\uffca\010\uffca\012\uffca\023\uffca\024\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\040\uffca\043\uffca\044\uffca\001" +
    "\002\000\036\002\uffcb\005\uffcb\006\uffcb\010\uffcb\012\uffcb" +
    "\023\uffcb\024\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\040" +
    "\uffcb\043\uffcb\044\uffcb\001\002\000\036\002\uffc9\005\uffc9" +
    "\006\uffc9\010\uffc9\012\uffc9\023\uffc9\024\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\040\uffc9\043\uffc9\044\uffc9\001\002" +
    "\000\036\002\uffcd\005\uffcd\006\uffcd\010\uffcd\012\uffcd\023" +
    "\uffcd\024\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\040\uffcd" +
    "\043\uffcd\044\uffcd\001\002\000\036\002\uffd0\005\uffd0\006" +
    "\uffd0\010\uffd0\012\uffd0\023\uffd0\024\uffd0\030\uffd0\031\uffd0" +
    "\032\057\033\056\040\uffd0\043\uffd0\044\uffd0\001\002\000" +
    "\032\002\uffd3\005\uffd3\006\uffd3\010\uffd3\012\uffd3\023\052" +
    "\024\051\030\053\031\054\040\uffd3\043\uffd3\044\uffd3\001" +
    "\002\000\012\003\041\037\045\046\040\047\037\001\002" +
    "\000\014\002\uffe8\006\uffe8\010\uffe8\012\uffe8\043\uffe8\001" +
    "\002\000\004\040\050\001\002\000\036\002\uffcc\005\uffcc" +
    "\006\uffcc\010\uffcc\012\uffcc\023\uffcc\024\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\040\uffcc\043\uffcc\044\uffcc\001\002" +
    "\000\012\003\041\037\045\046\040\047\037\001\002\000" +
    "\012\003\041\037\045\046\040\047\037\001\002\000\012" +
    "\003\041\037\045\046\040\047\037\001\002\000\012\003" +
    "\041\037\045\046\040\047\037\001\002\000\036\002\uffd1" +
    "\005\uffd1\006\uffd1\010\uffd1\012\uffd1\023\uffd1\024\uffd1\030" +
    "\uffd1\031\uffd1\032\057\033\056\040\uffd1\043\uffd1\044\uffd1" +
    "\001\002\000\012\003\041\037\045\046\040\047\037\001" +
    "\002\000\012\003\041\037\045\046\040\047\037\001\002" +
    "\000\036\002\uffcf\005\uffcf\006\uffcf\010\uffcf\012\uffcf\023" +
    "\uffcf\024\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\040\uffcf" +
    "\043\uffcf\044\uffcf\001\002\000\036\002\uffce\005\uffce\006" +
    "\uffce\010\uffce\012\uffce\023\uffce\024\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\040\uffce\043\uffce\044\uffce\001\002\000" +
    "\036\002\uffd2\005\uffd2\006\uffd2\010\uffd2\012\uffd2\023\uffd2" +
    "\024\uffd2\030\uffd2\031\uffd2\032\057\033\056\040\uffd2\043" +
    "\uffd2\044\uffd2\001\002\000\026\002\uffd4\005\uffd4\006\uffd4" +
    "\010\uffd4\012\uffd4\030\053\031\054\040\uffd4\043\uffd4\044" +
    "\uffd4\001\002\000\026\002\uffd5\005\uffd5\006\uffd5\010\uffd5" +
    "\012\uffd5\030\053\031\054\040\uffd5\043\uffd5\044\uffd5\001" +
    "\002\000\014\002\ufff6\006\ufff6\010\ufff6\012\ufff6\043\ufff6" +
    "\001\002\000\004\047\067\001\002\000\004\022\uffe7\001" +
    "\002\000\004\043\071\001\002\000\012\003\041\037\045" +
    "\046\040\047\037\001\002\000\004\043\073\001\002\000" +
    "\004\047\067\001\002\000\004\040\075\001\002\000\030" +
    "\003\022\004\013\011\030\013\005\014\015\015\026\016" +
    "\027\017\006\020\017\021\011\047\016\001\002\000\006" +
    "\010\077\043\035\001\002\000\014\002\uffc7\006\uffc7\010" +
    "\uffc7\012\uffc7\043\uffc7\001\002\000\004\022\101\001\002" +
    "\000\012\003\041\037\045\046\040\047\037\001\002\000" +
    "\016\002\uffe6\006\uffe6\010\uffe6\012\uffe6\040\uffe6\043\uffe6" +
    "\001\002\000\014\003\041\037\045\045\104\046\040\047" +
    "\037\001\002\000\006\040\uffd8\044\uffd8\001\002\000\006" +
    "\040\uffd7\044\uffd7\001\002\000\006\040\uffd9\044\uffd9\001" +
    "\002\000\006\040\uffd6\044\uffd6\001\002\000\006\040\112" +
    "\044\111\001\002\000\012\003\041\037\045\046\040\047" +
    "\037\001\002\000\014\002\uffdb\006\uffdb\010\uffdb\012\uffdb" +
    "\043\uffdb\001\002\000\006\040\uffda\044\uffda\001\002\000" +
    "\014\002\uffe4\006\uffe4\010\uffe4\012\uffe4\043\uffe4\001\002" +
    "\000\004\002\000\001\002\000\004\005\117\001\002\000" +
    "\030\003\022\004\013\011\030\013\005\014\015\015\026" +
    "\016\027\017\006\020\017\021\011\047\016\001\002\000" +
    "\010\006\121\010\122\043\035\001\002\000\030\003\022" +
    "\004\013\011\030\013\005\014\015\015\026\016\027\017" +
    "\006\020\017\021\011\047\016\001\002\000\014\002\uffea" +
    "\006\uffea\010\uffea\012\uffea\043\uffea\001\002\000\006\010" +
    "\124\043\035\001\002\000\014\002\uffe9\006\uffe9\010\uffe9" +
    "\012\uffe9\043\uffe9\001\002\000\014\002\uffc8\006\uffc8\010" +
    "\uffc8\012\uffc8\043\uffc8\001\002\000\020\002\uffca\006\uffca" +
    "\010\uffca\012\uffca\022\uffe7\043\uffca\044\uffca\001\002\000" +
    "\014\002\uffe1\006\uffe1\010\uffe1\012\uffe1\043\uffe1\001\002" +
    "\000\016\002\uffe3\006\uffe3\010\uffe3\012\uffe3\043\uffe3\044" +
    "\133\001\002\000\014\002\uffe2\006\uffe2\010\uffe2\012\uffe2" +
    "\043\uffe2\001\002\000\016\002\uffdc\006\uffdc\010\uffdc\012" +
    "\uffdc\043\uffdc\044\uffdc\001\002\000\012\003\041\037\045" +
    "\046\040\047\037\001\002\000\016\002\uffdd\006\uffdd\010" +
    "\uffdd\012\uffdd\043\uffdd\044\uffdd\001\002\000\014\002\uffe5" +
    "\006\uffe5\010\uffe5\012\uffe5\043\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\034\002\013\005\020\006\031\007\022\010" +
    "\003\011\032\017\030\020\007\022\006\030\017\031\024" +
    "\032\011\033\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\130" +
    "\015\131\016\126\021\127\001\001\000\012\012\124\013" +
    "\043\014\042\015\041\001\001\000\002\001\001\000\012" +
    "\012\115\013\043\014\042\015\041\001\001\000\002\001" +
    "\001\000\012\012\113\013\043\014\042\015\041\001\001" +
    "\000\004\035\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\033\006\031\007\022\010\003" +
    "\011\032\017\030\020\007\022\006\030\017\031\024\032" +
    "\011\033\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\064\007" +
    "\022\010\003\011\032\017\030\020\007\022\006\030\017" +
    "\031\024\032\011\033\023\001\001\000\012\012\045\013" +
    "\043\014\042\015\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\046\013\043\014\042" +
    "\015\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\063\014\042\015\041\001\001" +
    "\000\010\013\062\014\042\015\041\001\001\000\006\014" +
    "\061\015\041\001\001\000\006\014\054\015\041\001\001" +
    "\000\002\001\001\000\004\015\060\001\001\000\004\015" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\067\001\001\000\004\035\077\001\001" +
    "\000\002\001\001\000\012\012\071\013\043\014\042\015" +
    "\041\001\001\000\002\001\001\000\004\011\073\001\001" +
    "\000\002\001\001\000\032\005\075\006\031\007\022\010" +
    "\003\011\032\017\030\020\007\022\006\030\017\031\024" +
    "\032\011\033\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\101\013\043\014\042" +
    "\015\041\001\001\000\002\001\001\000\020\012\106\013" +
    "\043\014\042\015\041\023\107\024\105\034\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\106\013\043" +
    "\014\042\015\041\024\112\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\117\006\031\007\022\010" +
    "\003\011\032\017\030\020\007\022\006\030\017\031\024" +
    "\032\011\033\023\001\001\000\002\001\001\000\032\005" +
    "\122\006\031\007\022\010\003\011\032\017\030\020\007" +
    "\022\006\030\017\031\024\032\011\033\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\133\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase asig = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expressleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expressright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase express = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int asignaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asignaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase asigna = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // return_stmt ::= RETURN exp 
            {
              NodoBase RESULT =null;
		int expresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expres = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // param ::= exp 
            {
              NodoBase RESULT =null;
		int expresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expres = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // param ::= bool 
            {
              NodoBase RESULT =null;
		int booleanoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int booleanoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase booleano = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param_list ::= EMPTY 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param_list ::= param 
            {
              NodoBase RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase parametro = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param_list ::= param_list COMMA param 
            {
              NodoBase RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase parametro = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // call_funct ::= ID LPAREN param_list RPAREN 
            {
              NodoBase RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int plistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase plist = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_funct",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_list ::= factor 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_list ::= var_list COMMA factor 
            {
              NodoBase RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= VOID 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= BOOLEAN 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= INT 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decl_stmt ::= type vector 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tipo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase vec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decl_stmt ::= type assign_stmt 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tipo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int astmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int astmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase astmt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decl_stmt ::= type var_list 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tipo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign_stmt ::= ID NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= return_stmt 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= call_funct 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= decl_stmt 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mainbody ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int seculeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int securight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase secu = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainbody",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defpar_list ::= EMPTY 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defpar_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // defpar_list ::= type ID 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tipo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defpar_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defpar_list ::= defpar_list COMMA type ID 
            {
              NodoBase RESULT =null;
		int listpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase listp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase tipo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defpar_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_funct ::= type ID LPAREN defpar_list RPAREN mainbody 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase tipo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_funct",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_functs ::= EMPTY 
            {
              NodoBase RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_functs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_functs ::= decl_functs decl_funct 
            {
              NodoBase RESULT =null;
		int declaraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase declara = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfuncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfuncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dfunc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_functs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= mainbody 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= decl_functs mainbody 
            {
              NodoBase RESULT =null;
		int declararfunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declararfunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase declararfun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_seq 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 1"); 
					ast = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

